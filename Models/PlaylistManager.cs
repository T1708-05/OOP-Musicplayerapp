using System;
using System.Collections.Generic;
using MusicPlayerApp.Models;

namespace MusicPlayerApp.Managers
{
    public class PlaylistManager : Playlist
    {
        private User currentUser;
        private AccountManager accountManager;

        public PlaylistManager(User user, AccountManager accManager)
        {
            currentUser = user;
            accountManager = accManager;
        }

        public List<Playlist> Playlists
        {
            get { return currentUser.MyPlaylists; }
        }

        // Th√™m playlist m·ªõi
        public void AddPlaylist(Playlist playlist)
        {
            currentUser.MyPlaylists.Add(playlist);
            accountManager.SaveAccounts();
        }

        // T·∫°o m·ªôt playlist m·ªõi
        public Playlist CreatePlaylist()
        {
            Console.Write("üéµ Nh·∫≠p t√™n playlist m·ªõi: ");
            string playlistName = Console.ReadLine();
            Playlist newPlaylist = new Playlist { Name = playlistName };
            currentUser.AddPlaylist(newPlaylist);
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine($"‚úÖ ƒê√£ t·∫°o playlist '{playlistName}' th√†nh c√¥ng.");
            Console.ResetColor();
            return newPlaylist;
        }

        // Xem danh s√°ch c√°c playlist
        // public void ViewPlaylists()
        // {
        //     if (currentUser.MyPlaylists.Count == 0)
        //     {
        //         Console.ForegroundColor = ConsoleColor.Yellow;
        //         Console.WriteLine("‚ö†Ô∏è  B·∫°n ch∆∞a c√≥ playlist n√†o.");
        //         Console.ResetColor();
        //         return;
        //     }

        //     Console.ForegroundColor = ConsoleColor.Cyan;
        //     Console.WriteLine("üéµ Danh s√°ch c√°c playlist c·ªßa b·∫°n:");
        //     Console.ResetColor();
        //     for (int i = 0; i < currentUser.MyPlaylists.Count; i++)
        //     {
        //         Console.WriteLine($"{i + 1}. {currentUser.MyPlaylists[i].Name} - {currentUser.MyPlaylists[i].Songs.Count} b√†i h√°t");
        //     }
        // }

        // X√≥a m·ªôt playlist
        public void RemovePlaylist()
        {
            if (currentUser.MyPlaylists.Count == 0)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("‚ö†Ô∏è  B·∫°n ch∆∞a c√≥ playlist n√†o.");
                Console.ResetColor();
                return;
            }

            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("üóëÔ∏è  Ch·ªçn playlist ƒë·ªÉ x√≥a:");
            Console.ResetColor();
            for (int i = 0; i < currentUser.MyPlaylists.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {currentUser.MyPlaylists[i].Name}");
            }
            Console.Write("üî¢ Nh·∫≠p s·ªë th·ª© t·ª± c·ªßa playlist: ");
            if (!int.TryParse(Console.ReadLine(), out int playlistIndex) || playlistIndex < 1 || playlistIndex > currentUser.MyPlaylists.Count)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("‚ùå Playlist kh√¥ng h·ª£p l·ªá.");
                Console.ResetColor();
                return;
            }
            playlistIndex--;

            var playlistToRemove = currentUser.MyPlaylists[playlistIndex];
            currentUser.MyPlaylists.Remove(playlistToRemove);
            accountManager.SaveAccounts();
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine($"‚úÖ ƒê√£ x√≥a playlist '{playlistToRemove.Name}' kh·ªèi danh s√°ch.");
            Console.ResetColor();
        }

        // ƒê·ªïi t√™n m·ªôt playlist
        public void RenamePlaylist(Playlist selectedPlaylist)
        {
            Console.Write("‚úèÔ∏è  Nh·∫≠p t√™n m·ªõi cho playlist: ");
            string newName = Console.ReadLine();
            selectedPlaylist.RenamePlaylist(newName);
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("‚úÖ ƒê√£ ƒë·ªïi t√™n playlist th√†nh c√¥ng.");
            Console.ResetColor();
        }

        // Th√™m b√†i h√°t v√†o playlist
        public void AddSongToPlaylist()
        {
            if (currentUser.MyPlaylists.Count == 0)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("‚ö†Ô∏è  B·∫°n ch∆∞a c√≥ playlist n√†o. Vui l√≤ng t·∫°o playlist tr∆∞·ªõc.");
                Console.ResetColor();
                return;
            }

            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("üéµ Ch·ªçn playlist ƒë·ªÉ th√™m b√†i h√°t:");
            Console.ResetColor();
            for (int i = 0; i < currentUser.MyPlaylists.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {currentUser.MyPlaylists[i].Name}");
            }
            Console.Write("üî¢ Nh·∫≠p s·ªë th·ª© t·ª± c·ªßa playlist: ");
            if (!int.TryParse(Console.ReadLine(), out int playlistIndex) || playlistIndex < 1 || playlistIndex > currentUser.MyPlaylists.Count)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("‚ùå Playlist kh√¥ng h·ª£p l·ªá.");
                Console.ResetColor();
                return;
            }
            playlistIndex--;

            Playlist selectedPlaylist = currentUser.MyPlaylists[playlistIndex];

            Console.Write("üé∂ Nh·∫≠p t√™n b√†i h√°t: ");
            string title = Console.ReadLine();
            Console.Write("üë§ Nh·∫≠p t√™n ngh·ªá sƒ©: ");
            string artist = Console.ReadLine();
            Console.Write("üéº Nh·∫≠p th·ªÉ lo·∫°i: ");
            string genre = Console.ReadLine();
            Console.Write("üìÖ Nh·∫≠p ng√†y ph√°t h√†nh (dd/MM/yyyy): ");
            DateTime releaseDate;
            while (!DateTime.TryParseExact(Console.ReadLine(), "dd/MM/yyyy", null, System.Globalization.DateTimeStyles.None, out releaseDate))
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.Write("‚ùå Ng√†y ph√°t h√†nh kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i (dd/MM/yyyy): ");
                Console.ResetColor();
            }

            Console.Write("üìÅ Nh·∫≠p ƒë∆∞·ªùng d·∫´n t·ªáp nh·∫°c: ");
            string filePath = Console.ReadLine();
            Console.Write("üìù Nh·∫≠p ƒë∆∞·ªùng d·∫´n l·ªùi b√†i h√°t (c√≥ th·ªÉ b·ªè qua): ");
            string lyricsPath = Console.ReadLine();

            Song newSong = new Song
            {
                Title = title,
                Artist = artist,
                Genre = genre,
                ReleaseDate = releaseDate,
                FilePath = filePath,
                LyricsPath = lyricsPath
            };

            selectedPlaylist.AddSong(newSong);
            accountManager.SaveAccounts();
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine($"‚úÖ ƒê√£ th√™m b√†i h√°t '{title}' v√†o playlist '{selectedPlaylist.Name}'.");
            Console.ResetColor();
        }

        // X√≥a b√†i h√°t kh·ªèi playlist
        public void RemoveSongFromPlaylist(Playlist selectedPlaylist)
        {
            if (selectedPlaylist.Songs.Count == 0)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("‚ö†Ô∏è  Playlist n√†y kh√¥ng c√≥ b√†i h√°t n√†o.");
                Console.ResetColor();
                return;
            }

            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("üóëÔ∏è  Ch·ªçn b√†i h√°t ƒë·ªÉ x√≥a:");
            Console.ResetColor();
            for (int i = 0; i < selectedPlaylist.Songs.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {selectedPlaylist.Songs[i].Title} - {selectedPlaylist.Songs[i].Artist}");
            }
            Console.Write("üî¢ Nh·∫≠p s·ªë th·ª© t·ª± c·ªßa b√†i h√°t: ");
            if (!int.TryParse(Console.ReadLine(), out int songIndex) || songIndex < 1 || songIndex > selectedPlaylist.Songs.Count)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("‚ùå B√†i h√°t kh√¥ng h·ª£p l·ªá.");
                Console.ResetColor();
                return;
            }
            songIndex--;
            var songToRemove = selectedPlaylist.Songs[songIndex];
            selectedPlaylist.RemoveSong(songToRemove);
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine($"‚úÖ ƒê√£ x√≥a b√†i h√°t '{songToRemove.Title}' kh·ªèi playlist.");
            Console.ResetColor();
        }

        // Hi·ªÉn th·ªã danh s√°ch b√†i h√°t trong playlist
        public void ViewSongsInPlaylist(Playlist selectedPlaylist)
        {
            if (selectedPlaylist.Songs.Count == 0)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("‚ö†Ô∏è  Playlist n√†y kh√¥ng c√≥ b√†i h√°t n√†o.");
                Console.ResetColor();
                return;
            }

            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine($"üéµ Danh s√°ch b√†i h√°t trong playlist '{selectedPlaylist.Name}':");
            Console.ResetColor();
            for (int i = 0; i < selectedPlaylist.Songs.Count; i++)
            {
                Song song = selectedPlaylist.Songs[i];
                Console.WriteLine($"{i + 1}. üéµ {song.Title} - üë§ {song.Artist}");
            }
        }

        // Ch·ªçn v√† ph√°t b√†i h√°t t·ª´ playlist
        public void SelectAndPlaySong(Playlist selectedPlaylist, MusicPlayer player)
        {
            if (selectedPlaylist.Songs.Count == 0)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("‚ö†Ô∏è  Playlist n√†y kh√¥ng c√≥ b√†i h√°t n√†o.");
                Console.ResetColor();
                return;
            }

            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine($"üéµ Danh s√°ch b√†i h√°t trong playlist '{selectedPlaylist.Name}':");
            Console.ResetColor();
            for (int i = 0; i < selectedPlaylist.Songs.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {selectedPlaylist.Songs[i].Title} - {selectedPlaylist.Songs[i].Artist}");
            }

            Console.Write("‚ñ∂Ô∏è  Nh·∫≠p s·ªë th·ª© t·ª± c·ªßa b√†i h√°t ƒë·ªÉ ph√°t: ");
            if (!int.TryParse(Console.ReadLine(), out int songIndex) || songIndex < 1 || songIndex > selectedPlaylist.Songs.Count)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("‚ùå B√†i h√°t kh√¥ng h·ª£p l·ªá.");
                Console.ResetColor();
                return;
            }
            songIndex--;
            player.CurrentMediaIndex = songIndex;
            player.Play();
        }

        // Xem th√¥ng tin chi ti·∫øt c·ªßa b√†i h√°t
        public void ViewSongDetails(Playlist selectedPlaylist)
        {
            Console.Write("Nh·∫≠p s·ªë th·ª© t·ª± c·ªßa b√†i h√°t ƒë·ªÉ xem th√¥ng tin chi ti·∫øt: ");
            if (!int.TryParse(Console.ReadLine(), out int songIndex) || songIndex < 1 || songIndex > selectedPlaylist.Songs.Count)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("‚ùå B√†i h√°t kh√¥ng h·ª£p l·ªá.");
                Console.ResetColor();
                return;
            }
            songIndex--;
            Song selectedSong = selectedPlaylist.Songs[songIndex];
            selectedSong.DisplayInfo();
        }

        // Th√™m c√°c playlist m·∫´u n·∫øu c·∫ßn
        // ...
        // ==========================
        // Th√™m playlist m·∫´u
        // ==========================

        // Th√™m playlist Top Hits VN m·∫´u
        public Playlist AddTopHitsVN()
        {
            Playlist tophitPlaylist = new Playlist { Name = "Top Hits VN" };

            Song song1 = new Song
            {
                Title = "Waiting For You",
                Artist = "MONO",
                Genre = "Pop",
                ReleaseDate = new DateTime(2022, 8, 18),
                FilePath = @"C:\DOAN\topbaihitVN\waitingforyou.mp3",
            };

            Song song2 = new Song
            {
                Title = "B√™n Tr√™n T·∫ßng L·∫ßu",
                Artist = "TƒÉng Duy T√¢n",
                Genre = "Ballad",
                ReleaseDate = new DateTime(2022, 6, 11),
                FilePath = @"C:\DOAN\topbaihitVN\bentrentanglau.mp3",
            };

            Song song3 = new Song
            {
                Title = "Ch√¨m S√¢u",
                Artist = "MCK ft. Trung Tr·∫ßn",
                Genre = "Rap",
                ReleaseDate = new DateTime(2022, 9, 5),
                FilePath = @"C:\DOAN\topbaihitVN\chimsau.mp3",
            };

            Song song4 = new Song
            {
                Title = "V√¨ M·∫π Anh B·∫Øt Chia Tay",
                Artist = "Miu L√™ ft. Karik",
                Genre = "Pop",
                ReleaseDate = new DateTime(2022, 10, 21),
                FilePath = @"C:\DOAN\topbaihitVN\vimeanhbatchiatay.mp3",
            };

            Song song5 = new Song
            {
                Title = "H√£y Trao Cho Anh",
                Artist = "S∆°n T√πng M-TP",
                Genre = "Pop",
                ReleaseDate = new DateTime(2019, 7, 1),
                FilePath = @"C:\DOAN\topbaihitVN\haytraochoanh.mp3",
            };

            tophitPlaylist.AddSong(song1);
            tophitPlaylist.AddSong(song2);
            tophitPlaylist.AddSong(song3);
            tophitPlaylist.AddSong(song4);
            tophitPlaylist.AddSong(song5);

            AddPlaylist(tophitPlaylist);
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("‚úÖ ƒê√£ th√™m playlist 'Top Hits VN' v·ªõi 5 b√†i h√°t.");
            Console.ResetColor();
            return tophitPlaylist;
        }

        // Th√™m playlist S∆°n T√πng M-TP Collection
        public Playlist AddSonTungPlaylist()
        {
            Playlist sonTungPlaylist = new Playlist { Name = "S∆°n T√πng M-TP Collection" };

            Song song1 = new Song
            {
                Title = "Ch√∫ng Ta C·ªßa T∆∞∆°ng Lai",
                Artist = "S∆°n T√πng M-TP",
                ReleaseDate = new DateTime(2023, 1, 1),
                Genre = "Pop",
                FilePath = @"C:\DOAN\songsSonTung\chungtacuatuonglai.mp3",
                LyricsPath = @"C:\DOAN\lyricsSonTung\chungtacuatuonglai.txt"
            };

            Song song2 = new Song
            {
                Title = "L·∫°c Tr√¥i",
                Artist = "S∆°n T√πng M-TP",
                Genre = "Pop",
                ReleaseDate = new DateTime(2017, 1, 1),
                FilePath = @"C:\DOAN\songsSonTung\lactroi.mp3",
                LyricsPath = @"C:\DOAN\lyricsSonTung\lactroi.txt"
            };

            Song song3 = new Song
            {
                Title = "ƒê·ª´ng L√†m Tr√°i Tim Anh ƒêau",
                Artist = "S∆°n T√πng M-TP",
                Genre = "Pop",
                ReleaseDate = new DateTime(2018, 5, 5),
                FilePath = @"C:\DOAN\songsSonTung\dunglamtraitimanhdau.mp3",
                LyricsPath = @"C:\DOAN\lyricsSonTung\dunglamtraitimanhdau.txt"
            };

            Song song4 = new Song
            {
                Title = "C√≥ Ch·∫Øc Y√™u L√† ƒê√¢y",
                Artist = "S∆°n T√πng M-TP",
                Genre = "Pop",
                ReleaseDate = new DateTime(2020, 7, 10),
                FilePath = @"C:\DOAN\songsSonTung\cochacyeuladay.mp3",
                LyricsPath = @"C:\DOAN\lyricsSonTung\cochacyeuladay.txt"
            };

            Song song5 = new Song
            {
                Title = "√Çm Th·∫ßm B√™n Em",
                Artist = "S∆°n T√πng M-TP",
                Genre = "Pop",
                ReleaseDate = new DateTime(2015, 8, 22),
                FilePath = @"C:\DOAN\songsSonTung\amthambenem.mp3",
                LyricsPath = @"C:\DOAN\lyricsSonTung\amthambenem.txt"
            };

            sonTungPlaylist.AddSong(song1);
            sonTungPlaylist.AddSong(song2);
            sonTungPlaylist.AddSong(song3);
            sonTungPlaylist.AddSong(song4);
            sonTungPlaylist.AddSong(song5);

            AddPlaylist(sonTungPlaylist);
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("‚úÖ ƒê√£ th√™m playlist 'S∆°n T√πng M-TP Collection' v·ªõi 5 b√†i h√°t.");
            Console.ResetColor();
            return sonTungPlaylist;
        }

        // Th√™m playlist Bolero m·∫´u
        public Playlist AddBoleroPlaylist()
        {
            Playlist boleroPlaylist = new Playlist { Name = "Bolero" };

            Song song1 = new Song
            {
                Title = "Duy√™n Ph·∫≠n",
                Artist = "Nh·∫°c Sƒ© Th√°i Ch√¢u",
                Genre = "Bolero",
                ReleaseDate = new DateTime(1983, 1, 1),
                FilePath = @"C:\DOAN\Baihatgoiy\duyen_phan.mp3",
                LyricsPath = @"C:\DOAN\Baihatgoiy\duyen_phan_lyrics.txt"
            };

            Song song2 = new Song
            {
                Title = "M∆∞a ƒê√™m T·ªânh Nh·ªè",
                Artist = "Nh·∫°c Sƒ© H√† Ph∆∞∆°ng",
                Genre = "Bolero",
                ReleaseDate = new DateTime(1973, 1, 1),
                FilePath = @"C:\DOAN\Baihatgoiy\mua_dem_tinh_nho.mp3",
                LyricsPath = @"C:\DOAN\Baihatgoiy\mua_dem_tinh_nho_lyrics.txt"
            };

            Song song3 = new Song
            {
                Title = "ƒê·∫Øp M·ªô Cu·ªôc T√¨nh",
                Artist = "Nh·∫°c Sƒ© V≈© Thanh",
                Genre = "Bolero",
                ReleaseDate = new DateTime(1995, 1, 1),
                FilePath = @"C:\DOAN\Baihatgoiy\dap_mo_cuoc_tinh.mp3",
                LyricsPath = @"C:\DOAN\Baihatgoiy\dap_mo_cuoc_tinh_lyrics.txt"
            };

            boleroPlaylist.AddSong(song1);
            boleroPlaylist.AddSong(song2);
            boleroPlaylist.AddSong(song3);

            AddPlaylist(boleroPlaylist);
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("‚úÖ ƒê√£ th√™m playlist 'Bolero' v·ªõi 3 b√†i h√°t m·∫´u.");
            Console.ResetColor();
            return boleroPlaylist;
        }

        //Hi·ªÉn th·ªã th√¥ng tin t·∫•t c·∫£ c√°c b√†i h√°t trong t·∫•t c·∫£ c√°c playlist
        public override void DisplayInfoSongs()
        {
            // G·ªçi ph∆∞∆°ng th·ª©c DisplayInfoSongs t·ª´ l·ªõp cha (Playlist)
            base.DisplayInfoSongs();
            Console.Clear();
            if (Playlists.Count == 0)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("‚ö†Ô∏è  B·∫°n ch∆∞a c√≥ playlist n√†o.");
                Console.ResetColor();
                return;
            }

            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("\nüéµ Danh s√°ch c√°c playlist:");
            Console.ResetColor();

            for (int i = 0; i < Playlists.Count; i++)
            {
                var playlist = Playlists[i];
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"{i + 1}. {playlist.Name} ({playlist.Songs.Count} b√†i h√°t)");
                Console.ResetColor();

                if (playlist.Songs.Count > 0)
                {
                    foreach (var song in playlist.Songs)
                    {
                        Console.WriteLine($"   - {song.Title} by {song.Artist}");
                    }
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine("   (Playlist n√†y kh√¥ng c√≥ b√†i h√°t n√†o)");
                    Console.ResetColor();
                }
            }
        }


    }
}
